#!/usr/bin/env python


""" 
This node controls the swing in the joint space of the UR5 robot arm
ACTIONS:
  + <arm_controller/follow_joint_trajectory> (<FollowJointTrajectoryAction>) ~ make the robot arm joint follow a trajectory

SUBSCIRBERS:
  + <goal_distance> (<Float32>) ~ get goal distance measured by the vision node

PUBLISHERS:
  + <move_command> (<Int16>) ~ move the mobile platform in a specific direction

SERVICES:
  + <hit> (<Empty>) ~ calculate required swing range and perform swing

PARAMETERS:
  + <arm_controller/joints> (<list>) ~ a list of joint names of the UR5
"""


import roslib
import rospy
import actionlib
import math
import actionlib
import numpy as np
import random
import trajectory_msgs.msg as tm
from std_msgs.msg import String, Float32, Int16
from control_msgs.msg import JointTrajectoryControllerState, FollowJointTrajectoryAction, FollowJointTrajectoryGoal, FollowJointTrajectoryFeedback
from enum import Enum
from std_srvs.srv import Empty, EmptyResponse

STOP = 0
FORWARD = 1
BACKWARD = 2


class Swing:
    def __init__(self):
        '''
            This class set up and perform the swing
        '''
        self.dis_sub = rospy.Subscriber("goal_distance", Float32, self.distance_callback)

        #self.joint_pub = rospy.Publisher('arm_controller/command', tm.JointTrajectory, queue_size=10)
        self.command_pub = rospy.Publisher('move_command', Int16, queue_size=10)


        self.arm_client = actionlib.SimpleActionClient('arm_controller/follow_joint_trajectory', FollowJointTrajectoryAction)
        self.arm_client.wait_for_server()
        rospy.sleep(1)


        self.joint_names = rospy.get_param("arm_controller/joints")
        print(self.joint_names)

        self.up_srv = rospy.Service("hit", Empty, self.hit_callback)

        self.goal_pos = np.zeros(len(self.joint_names))
        self.joint_vel = np.zeros(len(self.joint_names))
        self.duration = 1.5
        self.moving_base_direction = [STOP, STOP]
        self.swinging = True

        self.curr_dis = 0.0

        self.time_between_waypoints = 0.5

        self.ready = False


        self.method = 'numerical' #or 'analytical'

    def distance_callback(self, data):
        '''callback function for getting distance from vision node
            Args:
                data (Float32) - measured goal distance
            Returns:
                None
        '''

        #get distance
        rospy.loginfo("get distance: %s", data)
        self.curr_dis = data.data/1000.0


    def hit_callback(self, emp):
        '''callback function for hit service to perform the swing
            Args:
                emp (Empty) - empty argument
            Returns:
                EmptyResponss (EmptyResponse)
        '''

        if abs(self.curr_dis) < 1e-2:
            rospy.logerr("You have not measured the goal distance yet")
            return EmptyResponse()

        self.time_between_waypoints = 0.5
        self.moving_base_direction = [STOP, STOP, STOP, BACKWARD, FORWARD]


        #numerical solution: m = 3.4735, b = -2.5061
        base_swing = (self.curr_dis+2.5061)/3.4735#1.8
        wrist_swing = 0.785*base_swing


        if self.method == 'analytical':
            #analytical solution (currently using)
            r_end = 0.605
            r_base = 0.402 + 0.3745
            club_mass = 0.5
            ball_mass = 0.04593
            energy_gain = 1.0/0.1763712
            mass_ratio = energy_gain*(ball_mass/club_mass)
            base_swing = (mass_ratio*math.sqrt((self.curr_dis*9.8)/math.sin(2.0*0.566)) - 1)/(0.785*r_end + r_base)
            wrist_swing = 0.785*base_swing


        #define joint pos at each step
        self.goal_pos = [[0.0, -1.0, 0.5, -1.87, 0.0, 3.14], 
                        [0.0, -1.0, 1.0, -1.87, -1.57, 3.14], 
                        [0.0, -1.0, 1.3, -1.87, -1.57, 3.14], 
                        [-base_swing/2, -1.0, 1.3, -1.87, -1.57 - wrist_swing/2, 3.14], 
                        [base_swing/2, -1.0, 1.3, -1.87, -1.57 + wrist_swing/2, 3.14]]
        print("hit")


        #define duration for each trajectory
        self.duration = [1.5,1.5,1.5,1.0,1.0]



        rospy.loginfo("hitting duration: %s", str(self.duration))

        self.swinging = False
        return EmptyResponse()

    def move_to_pose(self):
        '''create actions to move joints to target pose
            Args:
                None
            Returns:
                None
        '''
        self.swinging = True
        for i in range(len(self.goal_pos)):
            self.command_pub.publish(Int16(self.moving_base_direction[i]))
            

            arm_traj = tm.JointTrajectory()
            arm_traj.joint_names = self.joint_names

            jtp = tm.JointTrajectoryPoint()
            jtp.positions = self.goal_pos[i]
            jtp.velocities = self.joint_vel
            jtp.accelerations = np.zeros(len(self.joint_names))
            jtp.time_from_start = rospy.Duration(self.duration[i])
            arm_traj.points.append(jtp)

            arm_goal = FollowJointTrajectoryGoal()


            arm_goal.trajectory = arm_traj
            arm_goal.goal_time_tolerance = rospy.Duration(0)

            self.arm_client.send_goal(arm_goal)
            res = self.arm_client.wait_for_result()
            if res:
                print('success')
            else:
                print('fail')


            self.command_pub.publish(Int16(0))


            rospy.sleep(self.time_between_waypoints)

        




def main():
    """ The main() function. """
    #ros node init

    rospy.init_node('swing')
    r = rospy.Rate(10)

    swing = Swing()

    while not rospy.is_shutdown():
        if not swing.swinging:
            swing.move_to_pose()
        r.sleep()



if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass
